'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _postgresJsonApi = require('./postgresJsonApi');

var _postgresJsonApi2 = _interopRequireDefault(_postgresJsonApi);

var _WrappingQueryBuilderOperation = require('../WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereJsonNotObjectPostgresOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereJsonNotObjectPostgresOperation, _WrappingQueryBuilder);

  function WhereJsonNotObjectPostgresOperation() {
    (0, _classCallCheck3.default)(this, WhereJsonNotObjectPostgresOperation);
    return (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.apply(this, arguments));
  }

  WhereJsonNotObjectPostgresOperation.prototype.onBuild = function onBuild(knexBuilder, builder) {
    this.whereJsonNotObject(knexBuilder, builder.knex(), this.args[0]);
  };

  WhereJsonNotObjectPostgresOperation.prototype.whereJsonNotObject = function whereJsonNotObject(knexBuilder, knex, fieldExpression) {
    var self = this;

    function innerQuery() {
      var builder = _postgresJsonApi2.default.whereJsonbRefOnLeftJsonbValOrRefOnRight(this, fieldExpression, "@>", self.opt.compareValue, 'not');
      var ifRefNotExistQuery = _postgresJsonApi2.default.whereJsonFieldQuery(knex, fieldExpression, "IS", null);
      builder.orWhereRaw(ifRefNotExistQuery);
    }

    if (this.opt.bool === 'or') {
      knexBuilder.orWhere(innerQuery);
    } else {
      knexBuilder.where(innerQuery);
    }
  };

  return WhereJsonNotObjectPostgresOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereJsonNotObjectPostgresOperation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldoZXJlSnNvbk5vdE9iamVjdFBvc3RncmVzT3BlcmF0aW9uLmpzIl0sIm5hbWVzIjpbIldoZXJlSnNvbk5vdE9iamVjdFBvc3RncmVzT3BlcmF0aW9uIiwib25CdWlsZCIsImtuZXhCdWlsZGVyIiwiYnVpbGRlciIsIndoZXJlSnNvbk5vdE9iamVjdCIsImtuZXgiLCJhcmdzIiwiZmllbGRFeHByZXNzaW9uIiwic2VsZiIsImlubmVyUXVlcnkiLCJ3aGVyZUpzb25iUmVmT25MZWZ0SnNvbmJWYWxPclJlZk9uUmlnaHQiLCJvcHQiLCJjb21wYXJlVmFsdWUiLCJpZlJlZk5vdEV4aXN0UXVlcnkiLCJ3aGVyZUpzb25GaWVsZFF1ZXJ5Iiwib3JXaGVyZVJhdyIsImJvb2wiLCJvcldoZXJlIiwid2hlcmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7SUFFcUJBLG1DOzs7Ozs7OztnREFFbkJDLE8sb0JBQVFDLFcsRUFBYUMsTyxFQUFTO0FBQzVCLFNBQUtDLGtCQUFMLENBQXdCRixXQUF4QixFQUFxQ0MsUUFBUUUsSUFBUixFQUFyQyxFQUFxRCxLQUFLQyxJQUFMLENBQVUsQ0FBVixDQUFyRDtBQUNELEc7O2dEQUVERixrQiwrQkFBbUJGLFcsRUFBYUcsSSxFQUFNRSxlLEVBQWlCO0FBQ3JELFFBQU1DLE9BQU8sSUFBYjs7QUFFQSxhQUFTQyxVQUFULEdBQXNCO0FBQ3BCLFVBQUlOLFVBQVUsMEJBQVFPLHVDQUFSLENBQWdELElBQWhELEVBQXNESCxlQUF0RCxFQUF1RSxJQUF2RSxFQUE2RUMsS0FBS0csR0FBTCxDQUFTQyxZQUF0RixFQUFvRyxLQUFwRyxDQUFkO0FBQ0EsVUFBSUMscUJBQXFCLDBCQUFRQyxtQkFBUixDQUE0QlQsSUFBNUIsRUFBa0NFLGVBQWxDLEVBQW1ELElBQW5ELEVBQXlELElBQXpELENBQXpCO0FBQ0FKLGNBQVFZLFVBQVIsQ0FBbUJGLGtCQUFuQjtBQUNEOztBQUVELFFBQUksS0FBS0YsR0FBTCxDQUFTSyxJQUFULEtBQWtCLElBQXRCLEVBQTRCO0FBQzFCZCxrQkFBWWUsT0FBWixDQUFvQlIsVUFBcEI7QUFDRCxLQUZELE1BRU87QUFDTFAsa0JBQVlnQixLQUFaLENBQWtCVCxVQUFsQjtBQUNEO0FBQ0YsRzs7Ozs7a0JBcEJrQlQsbUMiLCJmaWxlIjoiV2hlcmVKc29uTm90T2JqZWN0UG9zdGdyZXNPcGVyYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQganNvbkFwaSBmcm9tICcuL3Bvc3RncmVzSnNvbkFwaSc7XG5pbXBvcnQgV3JhcHBpbmdRdWVyeUJ1aWxkZXJPcGVyYXRpb24gZnJvbSAnLi4vV3JhcHBpbmdRdWVyeUJ1aWxkZXJPcGVyYXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaGVyZUpzb25Ob3RPYmplY3RQb3N0Z3Jlc09wZXJhdGlvbiBleHRlbmRzIFdyYXBwaW5nUXVlcnlCdWlsZGVyT3BlcmF0aW9uIHtcblxuICBvbkJ1aWxkKGtuZXhCdWlsZGVyLCBidWlsZGVyKSB7XG4gICAgdGhpcy53aGVyZUpzb25Ob3RPYmplY3Qoa25leEJ1aWxkZXIsIGJ1aWxkZXIua25leCgpLCB0aGlzLmFyZ3NbMF0pO1xuICB9XG5cbiAgd2hlcmVKc29uTm90T2JqZWN0KGtuZXhCdWlsZGVyLCBrbmV4LCBmaWVsZEV4cHJlc3Npb24pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIGlubmVyUXVlcnkoKSB7XG4gICAgICBsZXQgYnVpbGRlciA9IGpzb25BcGkud2hlcmVKc29uYlJlZk9uTGVmdEpzb25iVmFsT3JSZWZPblJpZ2h0KHRoaXMsIGZpZWxkRXhwcmVzc2lvbiwgXCJAPlwiLCBzZWxmLm9wdC5jb21wYXJlVmFsdWUsICdub3QnKTtcbiAgICAgIGxldCBpZlJlZk5vdEV4aXN0UXVlcnkgPSBqc29uQXBpLndoZXJlSnNvbkZpZWxkUXVlcnkoa25leCwgZmllbGRFeHByZXNzaW9uLCBcIklTXCIsIG51bGwpO1xuICAgICAgYnVpbGRlci5vcldoZXJlUmF3KGlmUmVmTm90RXhpc3RRdWVyeSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0LmJvb2wgPT09ICdvcicpIHtcbiAgICAgIGtuZXhCdWlsZGVyLm9yV2hlcmUoaW5uZXJRdWVyeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtuZXhCdWlsZGVyLndoZXJlKGlubmVyUXVlcnkpO1xuICAgIH1cbiAgfVxufVxuIl19